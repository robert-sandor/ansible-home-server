- name: Get Lidarr download clients
  uri:
    url: "{{ lidarr_api_url }}/downloadclient?apiKey={{ lidarr_api_key }}"
    method: GET
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404 

- name: Check if download client {{ lidarr_dc }} already configured
  set_fact:
    _lidarr_dc_not_configured: "{{ _response.json | json_query(q) | length() == 0 }}"
  vars:
    q: "[?name == `{{ lidarr_dc }}`]"

- name: Set download client {{ lidarr_dc }} variables
  set_fact:
    lidarr_dc_host: "{{ lidarr_dc_host | default(lidarr_dc) }}"
    lidarr_dc_port: "{{ lidarr_dc_port | default('8082' if 'qbittorrent' in lidarr_dc else '9091') }}"
    lidarr_dc_use_ssl: "{{ lidarr_dc_use_ssl | default(true if lidarr_dc_port is defined and lidarr_dc_port == 443 else false) }}"
    lidarr_dc_username: "{{ lidarr_dc_username | default('') }}"
    lidarr_dc_password: "{{ lidarr_dc_password | default('') }}"

- name: Set common download client fields
  set_fact:
    _dc_fields:
      - name: host
        value: "{{ lidarr_dc_host }}"
      - name: port
        value: "{{ lidarr_dc_port }}"
      - name: useSsl
        value: "{{ lidarr_dc_use_ssl }}"
      - name: urlBase
        value: "{{ '' if 'qbittorrent' in lidarr_dc else '/transmission/' }}"
      - name: username
        value: "{{ lidarr_dc_username }}"
      - name: password
        value: "{{ lidarr_dc_password }}"
      - name: musicCategory
        value: "{{ lidarr_dc_category | default('music') }}"
      - name: recentTvPriority
        value: 0
      - name: olderTvPriority
        value: 0

- name: Set additional fields for qbittorrent
  set_fact: 
    _dc_fields: "{{ _dc_fields + additional_fields }}"
  vars:
    additional_fields:
      - name: musicImportedCategory
      - name: initialState
        value: 0
      - name: sequentialOrder
        value: false
      - name: firstAndLast
        value: false

- name: Set additional fields for transmission
  set_fact: 
    _dc_fields: "{{ _dc_fields + additional_fields }}"
  vars:
    additional_fields:
      - name: tvDirectory
      - name: addPaused
        value: false

- name: Add download client {{ lidarr_dc }} if not configured
  uri:
    url: "{{ lidarr_api_url }}/downloadclient?apiKey={{ lidarr_api_key }}"
    method: POST
    body_format: json
    body:
      enable: true
      protocol: torrent
      priority: 1
      removeCompletedDownloads: "{{ lidarr_dc_remove_completed_downloads | default(true) }}"
      removeFailedDownloads: true
      name: "{{ lidarr_dc }}"
      fields: "{{ _dc_fields }}"
      implementationName: "{{ 'qBittorrent' if 'qbittorrent' in lidarr_dc else 'Transmission' }}"
      implementation: "{{ 'QBittorrent' if 'qbittorrent' in lidarr_dc else 'Transmission' }}"
      configContract: "{{ 'QBittorrentSettings' if 'qbittorrent' in lidarr_dc else 'TransmissionSettings' }}"
      infoLink: 'https://wiki.servarr.com/lidarr/supported_{{ lidarr_dc }}'
      tags: []
    status_code: 201
  when: _lidarr_dc_not_configured
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404 

- name: Default remote mapping
  set_fact:
    lidarr_dc_mapping: "{{ lidarr_dc_mapping | default('/downloads:/data/downloads') }}"

- name: Add remote mapping for download client {{ lidarr_dc }}
  uri:
    url: "{{ lidarr_api_url }}/remotepathmapping?apiKey={{ lidarr_api_key }}"
    method: POST
    body_format: json
    body:
      host: "{{ lidarr_dc }}"
      remotePath: "{{ lidarr_dc_mapping.split(':')[0] }}"
      localPath: "{{ lidarr_dc_mapping.split(':')[1] }}"
    status_code: 201
  when: _lidarr_dc_not_configured
  register: _response
  retries: 10
  delay: 10
  until: _response.status != -1 and _response.status < 500 and _response.status != 404 
